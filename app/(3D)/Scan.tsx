/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { memo, Suspense, useEffect, useRef } from "react";
import { Html, Loader, useGLTF, useScroll } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useFrame } from "@react-three/fiber";
import { VscLoading } from "react-icons/vsc";

type GLTFResult = GLTF & {
  nodes: {
    Scan: THREE.Mesh;
  };
};

export const Scan = memo(
  function Scan(props: JSX.IntrinsicElements["mesh"]) {
    const { nodes } = useGLTF("/models/Scan2.gltf") as GLTFResult;
    const ref = useRef<THREE.Mesh>(null!);

    // useEffect(() => {
    //   console.log(ref.current);
    // }, []);

    const scroll = useScroll();

    useFrame(() => {
      ref.current.rotation.y = scroll.offset * 5;
      if (ref.current.rotation.y > Math.PI) ref.current.visible = false;
      else ref.current.visible = true;

      // TODO pointer interactivity
    });

    return (
      <Suspense
        fallback={
          <Html as="div" fullscreen>
            <VscLoading className="h-6 animate-spin" />
          </Html>
        }
      >
        <mesh
          {...props}
          ref={ref}
          castShadow
          receiveShadow
          geometry={nodes.Scan.geometry}
        >
          <meshStandardMaterial
            attach="material"
            color={"#52525B"}
            roughness={0.5}
            metalness={0.5}
            flatShading={true}
          />
        </mesh>
      </Suspense>
    );
  },
  () => true
);

useGLTF.preload("/models/Scan2.gltf");
