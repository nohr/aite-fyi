/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

"use client";

import React, { memo, Suspense, useEffect, useRef } from "react";
import {
  Html,
  Loader,
  shaderMaterial,
  TrailConfig,
  useGLTF,
  useScroll,
  useTrailTexture,
} from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { extend, useFrame } from "@react-three/fiber";
import { Color, DoubleSide } from "three";
import { color } from "framer-motion";
type GLTFResult = GLTF & {
  nodes: {
    Scan: THREE.Mesh;
  };
};
const DisplaceMaterial = shaderMaterial(
  {
    map: null,
    color: new Color("turquoise"),
    color2: new Color("magenta"),
    amount: 1,
  },
  `
    uniform sampler2D map;
    uniform float amount;

    varying float vDisplace;
    void main() {
      float displace = texture2D(map, uv).r;
      vDisplace = displace;

      vec3 pos = position;
      pos.z += displace * amount;

      gl_Position = projectionMatrix * modelViewMatrix * vec4(pos, 1.0);
    }
  `,
  `
    uniform vec3 color;
    uniform vec3 color2;

    varying float vDisplace;
    void main() {
      vec3 col = mix(color, color2, vDisplace);
      gl_FragColor.rgba = vec4(col, 1.0);
    }
  `
);
extend({ DisplaceMaterial });

const url = "/models/Scan2.gltf";
export const Scan = memo(
  function Scan(props: JSX.IntrinsicElements["mesh"]) {
    const { nodes } = useGLTF(url) as GLTFResult;
    const ref = useRef<THREE.Mesh>(null!);
    const scroll = useScroll();

    const config: TrailConfig = {
      size: 60,
      maxAge: 500,
      radius: 1,
      interpolate: 0,
      smoothing: 0.5,
      minForce: 0.3,
    };

    const [texture, onMove] = useTrailTexture(config);

    useFrame(() => {
      ref.current.rotation.y = scroll.offset * 5;
      if (ref.current.rotation.y > Math.PI / 3) ref.current.visible = false;
      else ref.current.visible = true;

      // TODO pointer interactivity
    });

    const displace = new DisplaceMaterial();
    return (
      <Suspense
        fallback={
          <Html as="div" fullscreen>
            <Loader />
          </Html>
        }
      >
        <mesh {...props} ref={ref}>
          <primitive object={nodes.Scan.geometry} />
          <meshStandardMaterial
            attach="material"
            color={"#52525B"}
            roughness={0.5}
            metalness={0.5}
            flatShading={true}
          />

          {/* <displaceMaterial attach="material" map={texture} /> */}
          {/* <meshStandardMaterial
            side={DoubleSide}
            displacementMap={texture}
            displacementScale={0.1}
            // wireframe
            color="black"
          /> */}
        </mesh>
      </Suspense>
    );
  },
  () => true
);

useGLTF.preload(url);
